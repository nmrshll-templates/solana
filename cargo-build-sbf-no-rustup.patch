diff --git a/sdk/cargo-build-sbf/src/main.rs b/sdk/cargo-build-sbf/src/main.rs
index 6d02499c8f..693aa9cda2 100644
--- a/sdk/cargo-build-sbf/src/main.rs
+++ b/sdk/cargo-build-sbf/src/main.rs
@@ -606,40 +606,6 @@ fn build_solana_package(
     } else {
         "x86_64"
     };
-    let platform_tools_download_file_name = if cfg!(target_os = "windows") {
-        format!("platform-tools-windows-{arch}.tar.bz2")
-    } else if cfg!(target_os = "macos") {
-        format!("platform-tools-osx-{arch}.tar.bz2")
-    } else {
-        format!("platform-tools-linux-{arch}.tar.bz2")
-    };
-    let package = "platform-tools";
-    let target_path = make_platform_tools_path_for_version(package, config.platform_tools_version);
-    install_if_missing(
-        config,
-        package,
-        "https://github.com/anza-xyz/platform-tools/releases/download",
-        platform_tools_download_file_name.as_str(),
-        &target_path,
-    )
-    .unwrap_or_else(|err| {
-        // The package version directory doesn't contain a valid
-        // installation, and it should be removed.
-        let target_path_parent = target_path.parent().expect("Invalid package path");
-        if target_path_parent.exists() {
-            fs::remove_dir_all(target_path_parent).unwrap_or_else(|err| {
-                error!(
-                    "Failed to remove {} while recovering from installation failure: {}",
-                    target_path_parent.to_string_lossy(),
-                    err,
-                );
-                exit(1);
-            });
-        }
-        error!("Failed to install platform-tools: {}", err);
-        exit(1);
-    });
-    link_solana_toolchain(config);
 
     let llvm_bin = config
         .sbf_sdk
@@ -652,16 +618,6 @@ fn build_solana_package(
     env::set_var("OBJDUMP", llvm_bin.join("llvm-objdump"));
     env::set_var("OBJCOPY", llvm_bin.join("llvm-objcopy"));
 
-    // RUSTC variable overrides cargo +<toolchain> mechanism of
-    // selecting the rust compiler and makes cargo run a rust compiler
-    // other than the one linked in Solana toolchain. We have to prevent
-    // this by removing RUSTC from the child process environment.
-    if env::var("RUSTC").is_ok() {
-        warn!(
-            "Removed RUSTC from cargo environment, because it overrides +solana cargo command line option."
-        );
-        env::remove_var("RUSTC")
-    }
     let cargo_target = "CARGO_TARGET_SBF_SOLANA_SOLANA_RUSTFLAGS";
     let rustflags = env::var("RUSTFLAGS").ok().unwrap_or_default();
     if env::var("RUSTFLAGS").is_ok() {
@@ -697,7 +653,6 @@ fn build_solana_package(
 
     let cargo_build = PathBuf::from("cargo");
     let mut cargo_build_args = vec![
-        "+solana",
         "build",
         "--release",
         "--target",
